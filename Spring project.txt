service layer

package com.vehicles.VehiclesProject.Service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.vehicles.VehiclesProject.entity.Vehicles;
import com.vehicles.VehiclesProject.repository.VehiclesRepository;

@Service // it creates bean, we can use @component also but to understand properly we will use service
public class VehiclesService implements VehicleServiceInterface //in this class we will write implements
{
	@Autowired
	private VehiclesRepository repository;

	@Override
	public Vehicles addVehicles(Vehicles vehicles) 
	{
	  Vehicles savedVehicles=repository.save(vehicles);
	  return savedVehicles;
	}

	@Override
	public List<Vehicles> getAllVehicles() 
	{
		return repository.findAll();		
	}

	@Override
	public Vehicles getvehicleById(int vid) 
	{
		return repository.findById(vid).get();
	}

	@Override
	public void deleteByVehicleId(int vid) 
	{
		repository.deleteById(vid);
	}

	@Override
	public Vehicles updateVehicles(Vehicles vehicles)
	{
		Vehicles savedVehicles=repository.save(vehicles);
		  return savedVehicles;
	}

	@Override
	public List<Vehicles> getvehicleByColour(String vcolour) {
		return repository.getDetailsByvcolour(vcolour);
	}

	@Override
	public void deleteAllVehicles() 
	{
		repository.deleteAll();
		
	}

		
}



controller


package com.vehicles.VehiclesProject.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.vehicles.VehiclesProject.Service.VehicleServiceInterface;
import com.vehicles.VehiclesProject.entity.Vehicles;
import com.vehicles.VehiclesProject.repository.VehiclesRepository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;

@RestController
@RequestMapping("/Anand")
public class VehiclesController 
{
	@Autowired
	private VehicleServiceInterface vsi;
	
	@Autowired
	private EntityManager entityManager;
	
	@PostMapping("/saveVehiclesdata")
	public ResponseEntity<Vehicles> addVehicles(@RequestBody Vehicles vehicles)
	{
		Vehicles vehiclesSaved=	vsi.addVehicles(vehicles);
		return new ResponseEntity<Vehicles>(vehiclesSaved,HttpStatus.CREATED);
	}
	
	@GetMapping("/getAll")
	public ResponseEntity<List<Vehicles>> getAllVehicles()
	{
		List<Vehicles>list=vsi.getAllVehicles();
		return new ResponseEntity<List<Vehicles>>(list,HttpStatus.OK);
	}
	
	@GetMapping("/getbyid/{vid}")
	public ResponseEntity<Vehicles> getVehiclesById(@PathVariable("vid") int vid)
	{
		Vehicles getOneVehicle=vsi.getvehicleById(vid);
		return new ResponseEntity<Vehicles>(getOneVehicle,HttpStatus.OK);
	}
	
	@GetMapping("/getbycolour/{vcolour}")
	public ResponseEntity<List<Vehicles>> getVehiclesByColour(@PathVariable("vcolour") String vcolour)
	{
		List<Vehicles> colourVehicle=vsi.getvehicleByColour(vcolour);
		return new ResponseEntity<List<Vehicles>>(colourVehicle,HttpStatus.ACCEPTED);
	}
	
	@DeleteMapping("/deleteById/{vid}")
	public ResponseEntity<Void> deleteById(@PathVariable("vid") int vid)
	{
		vsi.deleteByVehicleId(vid);
		return new ResponseEntity<Void>(HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/deleteAll")
	public ResponseEntity<Void> deleteAllVehicles()
	{
		vsi.deleteAllVehicles();
		return new ResponseEntity<Void>(HttpStatus.OK);
	}
	
	@PutMapping("/update")
	public ResponseEntity<Vehicles> updateVehicles(@RequestBody Vehicles vehicles)
	{
		Vehicles vehiclesSaved=	vsi.updateVehicles(vehicles);
		return new ResponseEntity<Vehicles>(vehiclesSaved,HttpStatus.CREATED);
	}
	
	@GetMapping("/sortvehicles")
	public List<Vehicles> findAll()
	{
		String querrySelect="SELECT v from Vehicles v ORDER BY v.vprice,v.vcolour";
		TypedQuery<Vehicles>query=entityManager.createQuery(querrySelect,Vehicles.class);
		return query.getResultList();
	}
	
	@GetMapping("/sortVehiclesByPrice")
	public List<Vehicles> findAllByPrice()
	{
		String querrySelect="SELECT v from Vehicles v WHERE v.vprice>100000 ORDER BY v.vprice,v.vcolour";
		TypedQuery<Vehicles>query=entityManager.createQuery(querrySelect,Vehicles.class);
		return query.getResultList();
	}
	
	

}

Repository


package com.vehicles.VehiclesProject.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.vehicles.VehiclesProject.entity.Vehicles;

@Repository
public interface VehiclesRepository extends JpaRepository<Vehicles, Integer>
{
	public List<Vehicles> getDetailsByvcolour(String vcolour);
}



Service interface

package com.vehicles.VehiclesProject.Service;

import java.util.List;

import com.vehicles.VehiclesProject.entity.Vehicles;

public interface VehicleServiceInterface //in this interface we will write methods
{

	public Vehicles addVehicles(Vehicles vehicles);

	public List<Vehicles> getAllVehicles();

	public Vehicles getvehicleById(int vid);

	public void deleteByVehicleId(int vid);

	public Vehicles updateVehicles(Vehicles vehicles);

	public List<Vehicles> getvehicleByColour(String vcolour);

	public void deleteAllVehicles();

}

Buisiness Exception

package com.vehicles.VehiclesProject.custom.exception;

import org.springframework.stereotype.Component;

@Component
public class BusinessException extends RuntimeException
{
	
    static final long serialVersionUID = 1L;
	private String errorCode;
	private String errorMessage;
	public String getErrorCode() {
		return errorCode;
	}
	public void setErrorCode(String errorCode) {
		this.errorCode = errorCode;
	}
	public String getErrorMessage() {
		return errorMessage;
	}
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
	public BusinessException(String errorCode, String errorMessage) {
		super();
		this.errorCode = errorCode;
		this.errorMessage = errorMessage;
	}
	public BusinessException() 
	{
		
	}

}

Controller Exception



package com.vehicles.VehiclesProject.custom.exception;

import org.springframework.stereotype.Component;

@Component
public class ControllerException2 extends RuntimeException
{
	
    static final long serialVersionUID = 1L;
	private String errorCode;
	private String errorMessage;
	public String getErrorCode() {
		return errorCode;
	}
	public void setErrorCode(String errorCode) {
		this.errorCode = errorCode;
	}
	public String getErrorMessage() {
		return errorMessage;
	}
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
	public ControllerException2(String errorCode, String errorMessage) {
		super();
		this.errorCode = errorCode;
		this.errorMessage = errorMessage;
	}
	public ControllerException2() 
	{
		
	}

}


Bean class


package com.vehicles.VehiclesProject.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;

@Data  //lombok, by default it creates getter and setters or we can use @Getter and @Setter
@Entity // to achieve class name as table name in database
@Table(name="vehicledata") //to give customize name for table
public class Vehicles 
{
	@Id //to set id as primarykey
	@GeneratedValue(strategy = GenerationType.AUTO) //it automatic generation
	private int vid;
	private String vname;
	private long vprice;
	private int vmodel;
	private String vcolour;

}

Controller class after Exception
package com.vehicles.VehiclesProject.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.vehicles.VehiclesProject.Service.VehicleServiceInterface;
import com.vehicles.VehiclesProject.custom.exception.BusinessException;
import com.vehicles.VehiclesProject.custom.exception.ControllerException;
import com.vehicles.VehiclesProject.entity.Vehicles;
import com.vehicles.VehiclesProject.repository.VehiclesRepository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;

@RestController
@RequestMapping("/Anand")
public class VehiclesController 
{
	@Autowired
	private VehicleServiceInterface vsi;
	
	@Autowired
	private EntityManager entityManager;
	
	@PostMapping("/saveVehiclesdata")
	public ResponseEntity<?> addVehicles(@RequestBody Vehicles vehicles)
	{
		try 
			{
			Vehicles vehiclesSaved=	vsi.addVehicles(vehicles);
			return new ResponseEntity<Vehicles>(vehiclesSaved,HttpStatus.CREATED);
			}
		catch (BusinessException e) 
		{
			ControllerException cException=new ControllerException(e.getErrorCode(),e.getErrorMessage());
			return new ResponseEntity<ControllerException>(cException,HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) 
		{
			ControllerException cException=new ControllerException("611","Somthing went wrong in controller");
			return new ResponseEntity<ControllerException>(cException,HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/getAll")
	public ResponseEntity<List<Vehicles>> getAllVehicles()
	{
		List<Vehicles>list=vsi.getAllVehicles();
		return new ResponseEntity<List<Vehicles>>(list,HttpStatus.OK);
	}
	
	@GetMapping("/getbyid/{vid}")
	public ResponseEntity<?> getVehiclesById(@PathVariable("vid") int vid)
	{
		try
		{
		Vehicles getOneVehicle=vsi.getvehicleById(vid);
		return new ResponseEntity<Vehicles>(getOneVehicle,HttpStatus.OK);
		}
		catch (BusinessException e) 
		{
			ControllerException cException=new ControllerException(e.getErrorCode(),e.getErrorMessage());
			return new ResponseEntity<ControllerException>(cException,HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) 
		{
			ControllerException cException=new ControllerException("613","Somthing went wrong in controller");
			return new ResponseEntity<ControllerException>(cException,HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/getbycolour/{vcolour}")
	public ResponseEntity<List<Vehicles>> getVehiclesByColour(@PathVariable("vcolour") String vcolour)
	{
		List<Vehicles> colourVehicle=vsi.getvehicleByColour(vcolour);
		return new ResponseEntity<List<Vehicles>>(colourVehicle,HttpStatus.ACCEPTED);
	}
	
	@DeleteMapping("/deleteById/{vid}")
	public ResponseEntity<Void> deleteById(@PathVariable("vid") int vid)
	{
		vsi.deleteByVehicleId(vid);
		return new ResponseEntity<Void>(HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/deleteAll")
	public ResponseEntity<Void> deleteAllVehicles()
	{
		vsi.deleteAllVehicles();
		return new ResponseEntity<Void>(HttpStatus.OK);
	}
	
	@PutMapping("/update")
	public ResponseEntity<Vehicles> updateVehicles(@RequestBody Vehicles vehicles)
	{
		Vehicles vehiclesSaved=	vsi.updateVehicles(vehicles);
		return new ResponseEntity<Vehicles>(vehiclesSaved,HttpStatus.CREATED);
	}
	
	@GetMapping("/sortvehicles")
	public List<Vehicles> findAll()
	{
		String querrySelect="SELECT v from Vehicles v ORDER BY v.vprice,v.vcolour";
		TypedQuery<Vehicles>query=entityManager.createQuery(querrySelect,Vehicles.class);
		return query.getResultList();
	}
	
	@GetMapping("/sortVehiclesByPrice")
	public List<Vehicles> findAllByPrice()
	{
		String querrySelect="SELECT v from Vehicles v WHERE v.vprice>100000 ORDER BY v.vprice,v.vcolour";
		TypedQuery<Vehicles>query=entityManager.createQuery(querrySelect,Vehicles.class);
		return query.getResultList();
	}
	
	

}

service class after exception


package com.vehicles.VehiclesProject.Service;

import java.util.List;

import org.apache.naming.java.javaURLContextFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.vehicles.VehiclesProject.custom.exception.BusinessException;
import com.vehicles.VehiclesProject.entity.Vehicles;
import com.vehicles.VehiclesProject.repository.VehiclesRepository;

@Service // it creates bean, we can use @component also but to understand properly we will use service
public class VehiclesService implements VehicleServiceInterface //in this class we will write implements
{
	@Autowired
	private VehiclesRepository repository;
	
	@Override
	public Vehicles addVehicles(Vehicles vehicles) //throws keyword only for checked/compile time exception
	{
		
			if(vehicles.getVname().isEmpty() || vehicles.getVname().length()==0) //Don't use try for validation
			{
				throw new BusinessException("601","please send proper name, it is blank");
			}
		try 
		{
			  Vehicles savedVehicles=repository.save(vehicles);
			  return savedVehicles;
		}

		catch (Exception e) 
		{
			throw new BusinessException("603","something went to wrong"+e.getMessage());
		}
	}

	@Override
	public List<Vehicles> getAllVehicles() 
	{
		List<Vehicles> vList=null;
		try 
		{
			vList=repository.findAll();
		}
		catch (Exception e) 
		{
			throw new BusinessException("604","something went to wrong while fetching data in service layer "+e.getMessage());
		}
			if(vList.isEmpty())
				throw new BusinessException("605","Hey...! there is no data in database");
			return vList;	
				
	}

	@Override
	public Vehicles getvehicleById(int vid) 
	{
		try 
		{
			return repository.findById(vid).get();

		}
		catch (IllegalArgumentException e) 
		{
			throw new BusinessException("606","given vehicle id is null please give valid id "+e.getMessage());
		}
		catch (java.util.NoSuchElementException e) 
		{
			throw new BusinessException("607","given vehicle id is not in database "+e.getMessage());
		}
	}

	@Override
	public void deleteByVehicleId(int vid) 
	{
		repository.deleteById(vid);
	}

	@Override
	public Vehicles updateVehicles(Vehicles vehicles)
	{
		Vehicles savedVehicles=repository.save(vehicles);
		  return savedVehicles;
	}

	@Override
	public List<Vehicles> getvehicleByColour(String vcolour) {
		return repository.getDetailsByvcolour(vcolour);
	}

	@Override
	public void deleteAllVehicles() 
	{
		repository.deleteAll();
		
	}

		
}
